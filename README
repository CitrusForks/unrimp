/*********************************************************\
 * Copyright (c) 2012-2016 Christian Ofenberg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


== Warning ==
This project is currently still heavy under construction and not usable for productive projects.


== Unrimp Description ==
Unified renderer implementation ("Un r imp"). Extensive examples from basic to advanced are provided as well. Originally started as modern renderer replacement for the PixelLight engine (https://www.pixellight.org/ or https://github.com/PixelLightFoundation/pixellight).


== Features ==
- General library design
	- C++ 11 and above, no legacy compiler support, compiled with wall warning level
	- Since this is a spare time project for personal fun, some experimental STD features are used which hopefully find a way into the final C++ 17. For example "std::tr2::sys::path" ( https://msdn.microsoft.com/en-us/library/hh874694.aspx ) to avoid having to use external libraries for such basics.
	- Compact user-header for the renderer backend API
		- A single all in one header for ease-of-use and best possible compile times
		- No need to links against the renderer library itself, load renderer interface implementations dynamically during runtime
	- Lightweight renderer implementations
		- Designed with AZDO ("Almost Zero Driver Overhead") in mind
		- Implementations try to stick as best as possible close-to-the-metal and as a result are just a few KiB instead of MiB in memory size
		- Implementations load the entry points of Direct3D, OpenGL and so on during runtime, meaning it's possible to react on system failures by e.g. dynamically switching to another renderer implementation
	- Support for static and dynamic build
	- Separation into backend, runtime and toolkit
		- Backend abstracts way the underlying renderer API like Vulkan/OpenGL/DirectX
		- Runtime designed with end-user and middleware-user in mind
			- Efficiency and responsiveness over flexibility (were it isn't useful in practice)
			- Intented to be controlled by a high-level entity-component system, no unused implementation feature overkill in the basic runtime
		- Toolkit designed with developer in mind: Asset source flexibility, asset background compilation, hot-reloading
- Cross-platform
	- Microsoft Windows
	- Linux
	- Android (work in progress)
	- Mac OS X in mind (nothing more at the moment, but in mind is important because Mac OS X 10.11 only supports OpenGL 4.1 and has some other nasty issues)


== Renderer API and Backends ==
- Renderer implementations for
	- Direct3D 9 (legacy, still maintained for curiosity reasons)
	- Direct3D 10 (legacy, still maintained for curiosity reasons)
	- Direct3D 11
	- Direct3D 12 (early phase)
	- Vulkan (early phase)
	- OpenGL (by default a OpenGL 4.1 context is created, the best OpenGL version Mac OS X 10.11 supports, so lowest version we have to support)
	- OpenGL ES 2 (legacy, still maintained for curiosity reasons, currently migrating to OpenGL ES 3.1)
	(legacy = critical features like uniform buffer, texture buffer and/or compute shaders are missing which are required for modern efficient renderers which provide e.g. automatic instancing or clustered deferred rendering)
- Render targets
	- Swap chains, render into one or multiple operation system windows
	- Framebuffer object (FBO) used for render to texture, support for multiple render targets (MRT), support for multisample (MSAA)
- Shaders
	- Vertex shader (VS)
	- Tessellation control shader (TCS, "hull shader" in Direct3D terminology)
	- Tessellation evaluation shader (TES, "domain shader" in Direct3D terminology)
	- Geometry shader (GS)
	- Fragment shader (FS, "pixel shader" in Direct3D terminology)
- Buffers
	- Vertex array object (VAO, input-assembler (IA) stage) with support for multiple vertex streams
		- Vertex buffer object (VBO, input-assembler (IA) stage)
		- Index buffer object (IBO, input-assembler (IA) stage)
	- Indirect buffer object with optional internal emulation, draw methods always use an indirect buffer to have an unified draw call API
	- Uniform buffer object (UBO, "constant buffer" in Direct3D terminology)
	- Texture buffer object (TBO)
	- Command buffer mandatory by design, not just build on top
- Textures
	- 2D texture
	- 2D texture array
- State objects with mapping to API specific settings during creation, not runtime
	- Pipeline state object (PSO) which directly maps to Direct3D 12, other backends internally subdivide into
		- Rasterizer state object (rasterizer stage (RS))
		- Depth stencil state object (output-merger (OM) stage)
		- Blend state object (output-merger (OM) stage)
	- Sampler state object (SO)
- Instancing support
	- Instanced arrays (shader model 3 feature, vertex array element advancing per-instance instead of per-vertex)
	- Draw instanced (shader model 4 feature, build in shader variable holding the current instance ID)
- Debug methods
	- When using Direct3D <11.1, those methods map to the Direct3D 9 PIX functions (D3DPERF_* functions, also works directly within VisualStudio 2015 out-of-the-box)
	- Used inside the renderer implementations for better renderer debugging
- Renderer implementation specific optimizations
	- OpenGL: Usage of direct state access (DSA), if available


== Renderer Runtime (e.g. "The Game") ==
- During runtime, only platform optimized and compressed binary assets are used
	- No inefficient generic stuff, no e.g. endianess handling, primarily raw chunks which can be fed into memory and GPU as efficient as possible
	- Efficient CRN ( https://github.com/richgel999/crunch ) textures are used by default, DDS is supported as well
- Asynchronous loading for all resources: To fight lags, micro stutter / judder, especially for virtual reality applications one needs a constant framerate
- Material and shader blueprint system which was desiged from ground up for pipeline state object (PSO) architecture
	- New material types can be added without a single line of C++ source code, meaning technical artists can create and fine-tune the shaders in realtime
	- Materials reference material blueprints and just are a list of key-value-pairs
	- Shader language specifics are abstracted away: Write shaders once, use them across multiple renderer APIs
	- Support for shader combinations (Uber-shaders)
	- Support for reusable shader pieces
	- Material inheritance for materials which should share common properties, but differ in other properties
	- Using "MojoShader" ( https://icculus.org/mojoshader/ ) as shader preprocessor so the resulting shaders are compact and easy to debug
	- Asyncrounous pipeline state compilation, including a fallback system to reduce visual artefacts in case of pipeline cache misses
- Compositor: Setup your overal rendering flow without a single line of C++ source code
	- The compositor is using the material blueprint system, meaning compact C++ implementation while offering mighty possibilities
	- Supports resolution scale
	- Shadow mapping (currently totally simple)
- Scene as most top-level concept: Fancy-feature set kept simple because more complex applications / games usually add an entity-component-system
- Render queue fed with generic renderables to decouple concrete constructs like meshes, particles, terrain etc. from the generic rendering
- "ImGui" ( https://github.com/ocornut/imgui ) is used as debug GUI to be able to quickly add interactive GUI elements for debugging, prototyping or visualization
- Virtual reality manager which is internally using OpenVR ( https://github.com/ValveSoftware/openvr ) for head-mounted display support


== Renderer Toolkit (e.g. "The Editor") ==
- Project compiler will transform source data into runtime data and while doing so tries to detect editing issues at tooltime as early as possible to reduce runtime harm and long debugging seasons
- Asynchronous resource compilation and hot reloading for all resources if the toolkit is enabled (true for production, probably not true for shippped titles)
	- Shader-resource example: It's possible to develop shaders while the application is running and see changes instantly
- Most source file formats are using JSON; RapidJSON ( http://rapidjson.org/ ) is used for parsing
- Performs optimizations and validations at tooltime instead of runtime. Examples:
	- Strips comments from shader source codes
	- Checks the material blueprint resources for valid uniform buffer packing rules
- Using Assimp (Open Asset Import Library) for mesh import and post processing like joining identical vertices, vertex cache optimization etc.


== Examples (just some high level keywords) ==
- Microsoft Windows: "NVIDIA Optimus" and "AMD Dynamic Switchable Graphic" awareness to reduce the risk of getting the integrated graphics unit assigned when there's a dedicated graphics card as well
- Memory leaks: On Microsoft Windows, "_CrtMemCheckpoint()" and "_CrtMemDumpAllObjectsSince()" is used by default to detect memory leaks while developing and not later on. In case something triggers, third parts tools like Deleaker ( http://www.deleaker.com/ ) can be used to locate the memory leak in detail.
- Fast Approximate Anti-Aliasing (FXAA)
- Custom resolved MSAA for antialiased deferred rendering
- Gaussian blur, used to e.g. blur the transparent ImGui background


== Terminology and Acronyms ==
- Renderer backend
	- Vertex buffer object (VBO)
	- Index buffer object (IBO)
	- Vertex array object (VAO)
	- Uniform buffer object (UBO), "constant buffer" in Direct3D terminology
	- Texture buffer object (TBO)
	- Sampler state object (SO)
	- Root signature (Direct3D terminology) = pipeline layout in Vulkan terminology
	- Pipeline state object (PSO)
	- Vertex shader (VS)
	- Tessellation control shader (TCS), "hull shader" in Direct3D terminology
	- Tessellation evaluation shader (TES), "domain shader" in Direct3D terminology
	- Geometry shader (GS)
	- Fragment shader (FS), "pixel shader" in Direct3D terminology
	- Uniform buffer view (UBV)
	- Shader resource view (SRV)
	- Unordered access view (UAV)
- Renderer runtime
	- Asset: Lightweight content metadata like ID, type and location (texture, mesh, shader etc. - on this abstraction level everything is an asset)
	- Resource: A concrete asset type used during runtime in-memory (texture, mesh, shader etc.)
	- Mesh: 3D-model consisting of a vertex- and index-buffer, geometry subdivided into sub-meshes
	- Material and shader blueprint: High-level rendering description
	- Material: Just a property-set used as shader input


== Microsoft Windows: First Example Kickoff ==
- Build "Release_Dynamic" target with Visual Studio
- Compile the runtime assets by starting "bin\x86_dynamic\ExampleProjectCompiler.exe"
- Use command line arguments to start the example application, e.g. "bin\x86_dynamic\Examples.exe FirstScene -r Direct3D11"


== Hints ==
The unified renderer interface can't unify some graphics API behaviour differences. Here's a list of hints you might want to know:
- Texel coordinate system origin
	- OpenGL: Left/bottom
	- Direct3D: Left/top
		- See "Coordinate Systems (Direct3D 10)" at MSDN http://msdn.microsoft.com/en-us/library/windows/desktop/cc308049%28v=vs.85%29.aspx
- Pixel coordinate system 
	- Direct3D: See "Coordinate Systems (Direct3D 10)" at MSDN http://msdn.microsoft.com/en-us/library/windows/desktop/cc308049%28v=vs.85%29.aspx
- Clip space coordinate system
	- OpenGL: [-1, -1, -1] ... [1, 1, 1]
	- Direct3D: [-1, -1, 0] ... [1, 1, 1]
	- Additional information: "The Cg Tutorial"-book, section "4.1.8 The Projection Transform", online available at http://http.developer.nvidia.com/CgTutorial/cg_tutorial_chapter04.html
