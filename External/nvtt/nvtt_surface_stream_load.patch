Index: src/nvtt/nvtt.h
===================================================================
--- src/nvtt/nvtt.h	(revision 1380)
+++ src/nvtt/nvtt.h	(working copy)
@@ -62,6 +62,11 @@
         struct Private; \
         Private & m
 
+namespace nv
+{
+    // Forward declarations.
+	class Stream;
+}
 
 // Public interface.
 namespace nvtt
@@ -463,7 +468,7 @@
         NVTT_API void range(int channel, float * rangeMin, float * rangeMax, int alpha_channel = -1, float alpha_ref = 0.f) const;
 
         // Texture data.
-        NVTT_API bool load(const char * fileName, bool * hasAlpha = 0);
+        NVTT_API bool load(const char * fileName, nv::Stream & s, bool * hasAlpha = 0);
         NVTT_API bool save(const char * fileName, bool hasAlpha = 0, bool hdr = 0) const;
         NVTT_API bool setImage(int w, int h, int d);
         NVTT_API bool setImage(InputFormat format, int w, int h, int d, const void * data);
Index: src/nvtt/Surface.cpp
===================================================================
--- src/nvtt/Surface.cpp	(revision 1380)
+++ src/nvtt/Surface.cpp	(working copy)
@@ -470,9 +470,9 @@
 }
 
 
-bool Surface::load(const char * fileName, bool * hasAlpha/*= NULL*/)
+bool Surface::load(const char * fileName, Stream & s, bool * hasAlpha/*= NULL*/)
 {
-    AutoPtr<FloatImage> img(ImageIO::loadFloat(fileName));
+    AutoPtr<FloatImage> img(ImageIO::loadFloat(fileName, s));
     if (img == NULL) {
         return false;
     }
