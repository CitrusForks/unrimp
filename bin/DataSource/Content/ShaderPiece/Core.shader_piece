/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@property(HLSL)
	// We're using HLSL syntax inside our shaders. So not much to map but only abstract in here so a mapping to GLSL is possible.
	@piece(SetCrossPlatformSettings)
		// Shader attribute input
		#define INPUT_BEGIN struct SHADER_INPUT {
			// TODO(co) Add "DRAWID" semantic
			#define INPUT_VERTEX_DRAW_ID	// "DRAWID" is a special vertex attribute semantic introduced
			//#define INPUT_VERTEX_DRAW_ID uint drawId : DRAWID;	// "DRAWID" is a special vertex attribute semantic introduced

			#define INPUT_VERTEX_POSITION(type, name) type name : POSITION;
			#define INPUT_VERTEX_COLOR(type, name) type name : COLOR;
			#define INPUT_VERTEX_NORMAL(type, name) type name : NORMAL;
			#define INPUT_VERTEX_TANGENT(type, name) type name : TANGENT;
			#define INPUT_TEXTURE_COORDINATE(type, name, index) type name : TEXCOORD##index;
			#define INPUT_TEXTURE_COORDINATE_NOINTERPOLATION(type, name, index) nointerpolation type name : TEXCOORD##index;
			#define INPUT_VERTEX_BLEND_INDICES(type, name) type name : BLENDINDICES;
			#define INPUT_VERTEX_BLEND_WEIGHTS(type, name) type name : BLENDWEIGHT;
		#define INPUT_END };

		// Shader attribute output
		#define OUTPUT_BEGIN struct SHADER_OUTPUT {
			#define OUTPUT_POSITION float4 OutputClipSpacePosition : SV_POSITION;
			#define OUTPUT_COLOR(index) float4 OutputColor##index : SV_TARGET##index;
			#define OUTPUT_TEXTURE_COORDINATE(type, name, index) type name : TEXCOORD##index;
			#define OUTPUT_TEXTURE_COORDINATE_NOINTERPOLATION(type, name, index) nointerpolation type name : TEXCOORD##index;
		#define OUTPUT_END };

		// Main
		#define MAIN_BEGIN SHADER_OUTPUT main(SHADER_INPUT ShaderInput) { SHADER_OUTPUT shaderOutput;
		#define MAIN_BEGIN_NO_OUTPUT void main(SHADER_INPUT ShaderInput) {
			#define MAIN_INPUT(name) ShaderInput.name

			// TODO(co) Add "DRAWID" semantic
			#define MAIN_INPUT_DRAW_ID 0
			// #define MAIN_INPUT_DRAW_ID ShaderInput.drawId

			#define MAIN_OUTPUT(name) shaderOutput.name
			#define MAIN_OUTPUT_POSITION shaderOutput.OutputClipSpacePosition
			#define MAIN_OUTPUT_COLOR(index) shaderOutput.OutputColor##index
			#define MAIN_RETURN return shaderOutput;
		#define MAIN_END return shaderOutput; }
		#define MAIN_END_NO_OUTPUT }

		// Math
		#define LERP(a, b, t) lerp(a, b, t)
		#define SATURATE(a) saturate(a)
		#define ROW_MATRIX_3x3(r0, r1, r2) float3x3(r0, r1, r2)
		#define ROW_MATRIX_4x4(r0, r1, r2, r3) float4x4(r0, r1, r2, r3)
		#define MATRIX_MUL(m, v) mul(m, v)
		#define CAST_TO(a, b) (b)(a)
		#define DDX(x) ddx(x)
		#define DDY(x) ddy(x)

		// Uniform buffer
		#define UNIFORM_BUFFER_BEGIN(name, index) cbuffer name : register(b##index) {
		#define UNIFORM_BUFFER_END }

		// Texture buffer
		#define TEXTURE_BUFFER(type, name, index) Buffer<type> name : register(t##index);
		#define TEXEL_FETCH(name, index) name.Load(index)

		// Texture
		#define TEXTURE_1D(name, index) Texture1D name : register(t##index);
		#define TEXTURE_2D(name, index) Texture2D name : register(t##index);
		#define TEXTURE_2D_MS(name, numberOfMultisamples, index) Texture2DMS<float4, numberOfMultisamples> name : register(t##index);
		#define TEXTURE_3D(name, index) Texture3D name : register(t##index);
		#define TEXTURE_CUBE(name, index) TextureCube name : register(t##index);
		float2 getDirect3DTextureSize(Texture2D textureObject)
		{
			uint width;
			uint height;
			textureObject.GetDimensions(width, height);
			return float2(width, height);
		}
		#define GET_TEXTURE_SIZE(textureObject) getDirect3DTextureSize(textureObject)

		// Sampler
		#define SAMPLER_STATE(name, index) SamplerState name : register(s##index);
		#define SAMPLER_COMPARISON_STATE(name, index) SamplerComparisonState name : register(s##index);
		#define SAMPLE_1D(textureObject, samplerObject, coordinate) textureObject.Sample(samplerObject, coordinate)
		#define SAMPLE_1D_LOD(textureObject, samplerObject, coordinate) textureObject.SampleLevel(samplerObject, coordinate.x, coordinate.w)
		#define SAMPLE_2D(textureObject, samplerObject, coordinate) textureObject.Sample(samplerObject, coordinate)
		#define SAMPLE_2D_LOD(textureObject, samplerObject, coordinate) textureObject.SampleLevel(samplerObject, coordinate.xy, coordinate.w)
		#define SAMPLE_2D_MS(textureObject, coordinate, sampleIndex) textureObject.Load(coordinate, sampleIndex)
		#define SAMPLE_2D_CMP_LEVEL_ZERO(textureObject, samplerObject, coordinate) textureObject.SampleCmpLevelZero(samplerObject, coordinate.xy, coordinate.w)
		#define SAMPLE_3D_LOD(textureObject, samplerObject, coordinate) textureObject.SampleLevel(samplerObject, coordinate.xyz, coordinate.w)
		#define SAMPLE_CUBE(textureObject, samplerObject, coordinate) textureObject.Sample(samplerObject, coordinate)
		#define SAMPLE_CUBE_LOD(textureObject, samplerObject, coordinate) textureObject.SampleLevel(samplerObject, coordinate.xyz, coordinate.w)

		// Fragment shader only
		#define DECLARE_IS_FRONT_FACE bool IsFrontFace : SV_IsFrontFace;
		#define IS_FRONT_FACE ShaderInput.IsFrontFace
	@end
@end

@property(GLSL)
	// We're using HLSL syntax inside our shaders. Hence we have to map GLSL to HLSL in here. See e.g.
	// - http://dench.flatlib.jp/opengl/glsl_hlsl
	// - https://hl2glsl.codeplex.com/wikipage?title=Differences%20Between%20HLSL%20and%20GLSL
	// - https://msdn.microsoft.com/en-us/library/windows/apps/dn166865.aspx
	// for a shader language mapping
	@piece(SetCrossPlatformSettings)
		#version 410 core	// This is what Mac OS X 10.11 and similar support, no fancy 420, no "#extension GL_ARB_shading_language_420pack : enable" and hence no "layout(binding)" usage possible (no problem, we're using material blueprints with a root signature)

		// Shader attribute input
		#define INPUT_BEGIN
			#define INPUT_VERTEX_DRAW_ID uniform uvec2 drawId;	// TODO(co) We're using OpenGL only for Mac OS X 10.11 which hasn't support for e.g. "glDrawElementsInstancedBaseVertexBaseInstance()", so we have to hack around. Mac OS X 10.11 also has no "glTexBufferRange()". On decent platforms this should be: #define INPUT_VERTEX_DRAW_ID in uint drawId;
			#define INPUT_VERTEX_POSITION(type, name) in type name;
			#define INPUT_VERTEX_COLOR(type, name) in type name;
			#define INPUT_VERTEX_NORMAL(type, name) in type name;
			#define INPUT_VERTEX_TANGENT(type, name) in type name;
			#define INPUT_TEXTURE_COORDINATE(type, name, index) in type name;
			#define INPUT_TEXTURE_COORDINATE_NOINTERPOLATION(type, name, index) flat in type name;
			#define INPUT_VERTEX_BLEND_INDICES(type, name) in type name;
			#define INPUT_VERTEX_BLEND_WEIGHTS(type, name) in type name;
		#define INPUT_END

		// Shader attribute output
		#define OUTPUT_BEGIN
			#define OUTPUT_POSITION out gl_PerVertex { vec4 gl_Position; };
			#define OUTPUT_COLOR(index) layout(location = ##index) out vec4 OutputColor##index;
			#define OUTPUT_TEXTURE_COORDINATE(type, name, index) out type name;
			#define OUTPUT_TEXTURE_COORDINATE_NOINTERPOLATION(type, name, index) flat out type name;
		#define OUTPUT_END

		// Main
		#define MAIN_BEGIN void main() {
		#define MAIN_BEGIN_NO_OUTPUT void main() {
			#define MAIN_INPUT(name) name
			#define MAIN_INPUT_DRAW_ID (drawId.x + gl_InstanceID)
			#define MAIN_OUTPUT(name) name
			#define MAIN_OUTPUT_POSITION gl_Position
			#define MAIN_OUTPUT_COLOR(index) OutputColor##index
			#define MAIN_RETURN
		#define MAIN_END }
		#define MAIN_END_NO_OUTPUT }

		// Math
		#define LERP(a, b, t) mix(a, b, t)
		#define SATURATE(a) clamp(a, 0.0, 1.0f)
		#define ROW_MATRIX_3x3(r0, r1, r2) transpose(mat3(r0, r1, r2))
		#define ROW_MATRIX_4x4(r0, r1, r2, r3) transpose(mat4(r0, r1, r2, r3))
		#define MATRIX_MUL(m, v) (m * v)
		#define CAST_TO(a, b) b(a)
		#define DDX(x) dFdx(x)
		#define DDY(x) dFdy(x)

		// Uniform buffer
		#define UNIFORM_BUFFER_BEGIN(name, index) layout(std140) uniform name {
		#define UNIFORM_BUFFER_END };

		// Texture buffer
		#define TEXTURE_BUFFER(type, name, index) uniform samplerBuffer name;
		#define TEXEL_FETCH(name, index) texelFetch(name, int(index + drawId.y / 16))	// TODO(co) Mac OS X 10.11 also has no "glTexBufferRange()", so we need to apply the texture buffer offset in here in a pretty inefficient way

		// Texture
		#define TEXTURE_1D(name, index) uniform sampler1D name;
		#define TEXTURE_2D(name, index) uniform sampler2D name;
		#define TEXTURE_2D_MS(name, numberOfMultisamples, index) uniform sampler2DMS name;
		#define TEXTURE_3D(name, index) uniform sampler3D name;
		#define TEXTURE_CUBE(name, index) uniform samplerCube name;
		#define GET_TEXTURE_SIZE(textureObject) textureSize(textureObject, 0)

		// Sampler
		#define SAMPLER_STATE(name, index) int name = index;	// We need something to pass into functions
		#define SAMPLER_COMPARISON_STATE(name, index)
		#define SAMPLE_1D(textureObject, samplerObject, coordinate) texture(textureObject, coordinate)
		#define SAMPLE_1D_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.x, coordinate.w)
		#define SAMPLE_2D(textureObject, samplerObject, coordinate) texture(textureObject, coordinate)
		#define SAMPLE_2D_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.xy, coordinate.w)
		#define SAMPLE_2D_MS(textureObject, coordinate, sampleIndex) texelFetch(textureObject, coordinate, sampleIndex)
		#define SAMPLE_2D_CMP_LEVEL_ZERO(textureObject, samplerObject, coordinate) vec4(coordinate.w <= textureLod(textureObject, coordinate.xy, 0.0f).r, 0.0f, 0.0f, 0.0f)
		#define SAMPLE_3D_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.xyz, coordinate.w)
		#define SAMPLE_CUBE(textureObject, samplerObject, coordinate) texture(textureObject, coordinate)
		#define SAMPLE_CUBE_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.xyz, coordinate.w)

		// Fragment shader only
		#define DECLARE_IS_FRONT_FACE
		#define IS_FRONT_FACE gl_FrontFacing

		// Primitive HLSL datatypes
		#define float2 vec2
		#define float3 vec3
		#define float4 vec4
		#define float4x4 mat4
		#define float3x4 mat3x4
		#define float3x3 mat3
		#define float3x2 mat3x2
		#define float2x3 mat2x3
		#define float2x2 mat2x2
		#define int2 ivec2
		#define int3 ivec3
		#define int4 ivec4
		#define uint2 uvec2
		#define uint3 uvec3
		#define uint4 uvec4

		// HLSL math functions
		#define rsqrt(x) inversesqrt(x)
		#define frac(x) fract(x)
		#define rcp(x) (1.0f / x)
	@end
@end

@property(GLSLES)
	// We're using HLSL syntax inside our shaders. Hence we have to map GLSL to HLSL in here. See e.g.
	// - http://dench.flatlib.jp/opengl/glsl_hlsl
	// - https://hl2glsl.codeplex.com/wikipage?title=Differences%20Between%20HLSL%20and%20GLSL
	// - https://msdn.microsoft.com/en-us/library/windows/apps/dn166865.aspx
	// for a shader language mapping
	@piece(SetCrossPlatformSettings)
		#version 310 es	// OpenGL ES 3.1. We need at least opengl es 3.1 support due texture buffer handling

		#extension GL_EXT_texture_buffer : enable
		precision highp float;

		// Shader attribute input// Shader attribute input
		#define INPUT_BEGIN
			#define INPUT_VERTEX_DRAW_ID uniform highp uvec2 drawId;	// TODO(co) We're using OpenGL only for Mac OS X 10.11 which hasn't support for e.g. "glDrawElementsInstancedBaseVertexBaseInstance()", so we have to hack around. Mac OS X 10.11 also has no "glTexBufferRange()". On decent platforms this should be: #define INPUT_VERTEX_DRAW_ID in uint drawId; TODO(sw) On opengles glTexBufferRange is only supported with opengl es 3.2, but for now we support only opengl es 3.0
			#define INPUT_VERTEX_POSITION(type, name) in highp type name;
			#define INPUT_VERTEX_COLOR(type, name) in highp type name;
			#define INPUT_VERTEX_NORMAL(type, name) in highp type name;
			#define INPUT_VERTEX_TANGENT(type, name) in highp type name;
			#define INPUT_TEXTURE_COORDINATE(type, name, index) in highp type name;
			#define INPUT_TEXTURE_COORDINATE_NOINTERPOLATION(type, name, index) flat in highp type name;
			#define INPUT_VERTEX_BLEND_INDICES(type, name) in highp type name;
			#define INPUT_VERTEX_BLEND_WEIGHTS(type, name) in highp type name;
		#define INPUT_END

		// Shader attribute output
		#define OUTPUT_BEGIN
			#define OUTPUT_POSITION // gl_Position is still defined in opengl es 300 glsl
			#define OUTPUT_COLOR(index) layout(location = ##index) out highp vec4 OutputColor##index;
			#define OUTPUT_TEXTURE_COORDINATE(type, name, index) out highp type name;
			#define OUTPUT_TEXTURE_COORDINATE_NOINTERPOLATION(type, name, index) flat out highp type name;
		#define OUTPUT_END

		// Main
		#define MAIN_BEGIN void main() {
		#define MAIN_BEGIN_NO_OUTPUT void main() {
			#define MAIN_INPUT(name) name
			#define MAIN_INPUT_DRAW_ID (drawId.x + gl_InstanceID)
			#define MAIN_OUTPUT(name) name
			#define MAIN_OUTPUT_POSITION gl_Position
			#define MAIN_OUTPUT_COLOR(index) OutputColor##index
			#define MAIN_RETURN
		#define MAIN_END }
		#define MAIN_END_NO_OUTPUT }

		// Math
		#define LERP(a, b, t) mix(a, b, t)
		#define SATURATE(a) clamp(a, 0.0, 1.0f)
		#define ROW_MATRIX_3x3(r0, r1, r2) transpose(mat3(r0, r1, r2))
		#define ROW_MATRIX_4x4(r0, r1, r2, r3) transpose(mat4(r0, r1, r2, r3))
		#define MATRIX_MUL(m, v) (m * v)
		#define CAST_TO(a, b) b(a)
		#define DDX(x) dFdx(x)
		#define DDY(x) dFdy(x)

		// Uniform buffer
		#define UNIFORM_BUFFER_BEGIN(name, index) uniform
		#define UNIFORM_BUFFER_END

		// Texture buffer
		#define TEXTURE_BUFFER(type, name, index) uniform highp samplerBuffer name;
		#define TEXEL_FETCH(name, index) texelFetch(name, int(index + drawId.y / 16))	// TODO(co) Mac OS X 10.11 also has no "glTexBufferRange()", so we need to apply the texture buffer offset in here in a pretty inefficient way TODO(sw) On opengles glTexBufferRange is only supported with opengl es 3.2, but for now we support only opengl es 3.1

		// Texture
		#define TEXTURE_1D(name, index) uniform highp sampler2D name;	// OpenGL ES 3 has no 1D textures, just use a 2D texture with a height of one
		#define TEXTURE_2D(name, index) uniform highp sampler2D name;
		#define TEXTURE_2D_MS(name, numberOfMultisamples, index) uniform sampler2DMS name;
		#define TEXTURE_3D(name, index) uniform highp sampler3D name;
		#define TEXTURE_CUBE(name, index) uniform highp samplerCube name;
		#define GET_TEXTURE_SIZE(textureObject) textureSize(textureObject, 0)

		// Sampler
		#define SAMPLER_STATE(name, index) int name = index;	// We need something to pass into functions
		#define SAMPLER_COMPARISON_STATE(name, index)
		#define SAMPLE_1D(textureObject, samplerObject, coordinate) texture(textureObject, vec2(coordinate, 0.0f))							// OpenGL ES 3 has no 1D textures, just use a 2D texture with a height of one
		#define SAMPLE_1D_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, vec2(coordinate.x, 0.0f), coordinate.w)	// OpenGL ES 3 has no 1D textures, just use a 2D texture with a height of one
		#define SAMPLE_2D(textureObject, samplerObject, coordinate) texture(textureObject, coordinate)
		#define SAMPLE_2D_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.xy, coordinate.w)
		#define SAMPLE_2D_MS(textureObject, coordinate, sampleIndex) texelFetch(textureObject, coordinate, sampleIndex)
		#define SAMPLE_2D_CMP_LEVEL_ZERO(textureObject, samplerObject, coordinate) vec4(coordinate.w <= textureLod(textureObject, coordinate.xy, 0.0f).r, 0.0f, 0.0f, 0.0f)
		#define SAMPLE_3D_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.xyz, coordinate.w)
		#define SAMPLE_CUBE(textureObject, samplerObject, coordinate) texture(textureObject, coordinate)
		#define SAMPLE_CUBE_LOD(textureObject, samplerObject, coordinate) textureLod(textureObject, coordinate.xyz, coordinate.w)

		// Fragment shader only
		#define DECLARE_IS_FRONT_FACE
		#define IS_FRONT_FACE gl_FrontFacing

		// Primitive HLSL datatypes
		#define float2 vec2
		#define float3 vec3
		#define float4 vec4
		#define float4x4 mat4
		#define float3x4 mat3x4
		#define float3x3 mat3
		#define float3x2 mat3x2
		#define float2x3 mat2x3
		#define float2x2 mat2x2
		#define int2 ivec2
		#define int3 ivec3
		#define int4 ivec4
		#define uint2 uvec2
		#define uint3 uvec3
		#define uint4 uvec4

		// HLSL math functions
		#define rsqrt(x) inversesqrt(x)
		#define frac(x) fract(x)
		#define rcp(x) (1.0f / x)
	@end
@end
