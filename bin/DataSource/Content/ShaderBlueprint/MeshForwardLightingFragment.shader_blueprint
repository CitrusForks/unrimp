/*********************************************************\
 * Copyright (c) 2012-2016 Christian Ofenberg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(15)	// "Core.shader_piece"


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Define pieces                                         ]
//[-------------------------------------------------------]
// TODO(co) Define this outside
@piece(MaximumNumberOfMaterials)2@end


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(float2, TexCoordVS, 0)			// Texture coordinate
	INPUT_TEXTURE_COORDINATE(float3, TangentFrame0VS, 1)	// Tangent frame
	INPUT_TEXTURE_COORDINATE(float3, TangentFrame1VS, 2)	// Tangent frame
	INPUT_TEXTURE_COORDINATE(float3, TangentFrame2VS, 3)	// Tangent frame
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
UNIFORM_BUFFER_BEGIN(PassUniformBuffer, 0)
	float4x4 WorldSpaceToViewSpaceMatrix;
	float4x4 WorldSpaceToClipSpaceMatrix;
	float3	 ViewSpaceSunLightDirection;
	float	 Wetness;
	float3	 SunLightColor;
	float	 StaticPropertyTest;
UNIFORM_BUFFER_END
struct Material
{
	float3 DiffuseColor;
	float  StaticPropertyTest;
};
UNIFORM_BUFFER_BEGIN(MaterialUniformBuffer, 1)
	Material Materials[@insertpiece(MaximumNumberOfMaterials)];
UNIFORM_BUFFER_END
UNIFORM_BUFFER_BEGIN(InstanceUniformBuffer, 2)
	float4x4 ObjectSpaceToWorldSpaceMatrix;
	int		 AssignedMaterialSlot;
UNIFORM_BUFFER_END

// Samplers
SAMPLER_STATE(SamplerLinear, 0)

// Textures
@property(UseDiffuseMap)
	TEXTURE_2D(DiffuseMap, 0)
@end
@property(UseEmissiveMap)
	TEXTURE_2D(EmissiveMap, 1)
@end
@property(UseNormalMap)
	TEXTURE_2D(NormalMap, 2)	// Tangent space normal map
@end
@property(UseSpecularMap)
	TEXTURE_2D(SpecularMap, 3)
@end


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@property(Lighting)
	@piece(CalculateLighting)
		// Perform standard Blinn-Phong diffuse and specular lighting

		// Calculate the diffuse lighting
		float diffuseLightFactor = max(dot(normal, ViewSpaceSunLightDirection), 0.0f);
		float3 diffuseLightColor = SunLightColor * diffuseLightFactor;

		// Calculate the specular lighting
		float3 viewSpaceHalfVector = normalize(ViewSpaceSunLightDirection + ViewSpaceViewVector);
		float specularLightFactor = (diffuseLightFactor > 0.0f) ? pow(max(dot(normal, viewSpaceHalfVector), 0.0f), 128.0f) : 0.0f;
		float3 specularLightColor = Wetness * SunLightColor * specularLightFactor;
	@end
@end
@property(!Lighting)
	@piece(CalculateLighting)
		float diffuseLightColor = 1.0f;
		float specularLightColor = 0.0f;
	@end
@end


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get the used material
	Material material = Materials[AssignedMaterialSlot];

	// Build in variables
	float3 ViewSpaceViewVector = float3(0.0f, 0.0f, 1.0f);	// In view space, we always look along the positive z-axis

	// Get the per fragment normal [0..1] by using a tangent space normal map
	@property(UseNormalMap)
		float3 normal = SAMPLE_2D(NormalMap, SamplerLinear, MAIN_INPUT(TexCoordVS)).rgb;
	@end
	@property(!UseNormalMap)
		float3 normal = float3(0.0f, 0.0f, 1.0f);
	@end

	// Transform the normal from [0..1] to [-1..1]
	normal = (normal - 0.5f) * 2.0f;

	// Transform the tangent space normal into view space
	normal = normalize(normal.x * MAIN_INPUT(TangentFrame0VS) + normal.y * MAIN_INPUT(TangentFrame1VS) + normal.z * MAIN_INPUT(TangentFrame2VS));

	// Calculate lighting
	@insertpiece(CalculateLighting)

	// Diffuse term
	@property(UseDiffuseMap)
		float3 color = diffuseLightColor * material.DiffuseColor * SAMPLE_2D(DiffuseMap, SamplerLinear, MAIN_INPUT(TexCoordVS)).rgb;
	@end
	@property(!UseDiffuseMap)
		float3 color = diffuseLightColor * material.DiffuseColor;
	@end

	// Specular term
	@property(UseSpecularMap)
		color += specularLightColor * SAMPLE_2D(SpecularMap, SamplerLinear, MAIN_INPUT(TexCoordVS)).rgb;
	@end
	@property(!UseSpecularMap)
		color += specularLightColor;
	@end

	// Emissive term
	@property(UseEmissiveMap)
		color += SAMPLE_2D(EmissiveMap, SamplerLinear, MAIN_INPUT(TexCoordVS)).rgb;
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = min(float4(color * material.StaticPropertyTest, 1.0f), float4(1.0f, 1.0f, 1.0f, 1.0f));
MAIN_END
