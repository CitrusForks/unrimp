/*********************************************************\
 * Copyright (c) 2012-2016 Christian Ofenberg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(15)	// "Core.shader_piece"


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_VERTEX_POSITION(float4, PositionTexCoord)	// xy = position, zw = texture coordinate
	INPUT_VERTEX_DRAW_ID							// Draw ID
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE				 (float2, TexCoordVS, 0)			// Texture coordinate
	OUTPUT_TEXTURE_COORDINATE_NOINTERPOLATION(float2, InverseTextureSize0VS, 1)	// Inverse texture size 0
	OUTPUT_POSITION																// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END

// Textures
TEXTURE_2D(ColorMap, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Transform the object space vertex into clip space
	MAIN_OUTPUT_POSITION = float4(MAIN_INPUT(PositionTexCoord).xy, 0.0f, 1.0f);
	@property(GLSL || GLSLES)
		MAIN_OUTPUT_POSITION.y = -MAIN_OUTPUT_POSITION.y;
	@end

	// Pass through the texture coordinates
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(PositionTexCoord.zw);

	// Pass through the inverse texture size 0
	// Background: Modern shader languages provide functionality to get the texture size. See e.g.
	// - HLSL "GetDimensions()" ( https://msdn.microsoft.com/de-de/library/windows/desktop/bb509693(v=vs.85).aspx )
	// - GLSL "textureSize()" ( https://www.opengl.org/sdk/docs/man4/html/textureSize.xhtml )
	// On the other hand, there are indications that usage of this functionality is not recommenced performance wise. See e.g.
	// - http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/05/GCNPerformanceTweets.pdf
	// - http://www.gamedev.net/topic/605580-performance-comparison-hlsl-texturegetdimension/
	// So, you might want to perform this inside the vertex shader and then pass the result into the fragment shader (except the vertes shader is your bottleneck).
	MAIN_OUTPUT(InverseTextureSize0VS) = 1.0f / GET_TEXTURE_SIZE(ColorMap);
MAIN_END
