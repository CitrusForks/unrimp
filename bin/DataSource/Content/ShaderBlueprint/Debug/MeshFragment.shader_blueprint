/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Core.asset)
@includepiece(ShaderPiece/Color.asset)


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Define pieces                                         ]
//[-------------------------------------------------------]
// TODO(co) Define this outside
@piece(MaximumNumberOfMaterials)2@end


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE_NOINTERPOLATION(uint,   AssignedMaterialSlotVS, 0)	// The assigned material slot inside the material uniform buffer
	INPUT_TEXTURE_COORDINATE				(float2, TexCoordVS,			 1)	// Texture coordinate
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct Material
{
	float3 DiffuseColor;
};
UNIFORM_BUFFER_BEGIN(MaterialUniformBuffer, 1)
	Material Materials[@insertpiece(MaximumNumberOfMaterials)];
UNIFORM_BUFFER_END

// Samplers
SAMPLER_STATE(SamplerLinear, 0)

// Textures: We need to start at texture unit 1 instead of texture unit 0 because the vertex shader has an instance texture buffer bound at texture unit 0 (OpenGL shares those bindings accros all shader stages while Direct3D doesn't)
@property(UseDiffuseMap)
	TEXTURE_2D(_drgb_nxa, 1)	// RGB channel = Diffuse map ("_d"-postfix), A channel = x component of normal map ("_n"-postfix)
@end


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@insertpiece(DefineLinearSpaceToGammaSpace3)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get the used material
	Material material = Materials[MAIN_INPUT(AssignedMaterialSlotVS)];

	// Diffuse term
	@property(UseDiffuseMap)
		// Usually we're using sRGB textures, so textures might already be loaded in this format when switching to the debug compositor, convert back from linear space to gamma space
		float3 color = material.DiffuseColor * LinearSpaceToGammaSpace3(SAMPLE_2D(_drgb_nxa, SamplerLinear, MAIN_INPUT(TexCoordVS)).rgb);
	@end
	@property(!UseDiffuseMap)
		float3 color = material.DiffuseColor;
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = min(float4(color, 1.0f), float4(1.0f, 1.0f, 1.0f, 1.0f));
MAIN_END
