/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(15)	// "Core.shader_piece"
@includepiece(16)	// "TangentFrame.shader_piece"


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_VERTEX_POSITION(float3, Position)			// Object space vertex position
	INPUT_TEXTURE_COORDINATE(float2, TexCoord, 0)	// 32 bit texture coordinate
	@property(UseGpuSkinning)
		INPUT_VERTEX_BLEND_INDICES(uint4, blendIndices)
		INPUT_VERTEX_BLEND_WEIGHTS(float4, blendWeights)
	@end
	INPUT_VERTEX_DRAW_ID							// Draw ID
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE_NOINTERPOLATION(uint,   AssignedMaterialSlotVS, 0)	// The assigned material slot inside the material uniform buffer
	OUTPUT_TEXTURE_COORDINATE				 (float2, TexCoordVS,			  1)	// Texture coordinate
	OUTPUT_POSITION																	// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToClipSpaceMatrix;
};
UNIFORM_BUFFER_BEGIN(PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END
UNIFORM_BUFFER_BEGIN(InstanceUniformBuffer, 2)
	// x = The instance texture buffer start index
	// y = The assigned material slot inside the material uniform buffer
	// z = The custom parameters start index inside the instance texture buffer
	// w = Unused
	uint4 InstanceIndicesArray[4096];	// 64 KiB
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(float4, InstanceTextureBuffer, 0)	// "POSITION_ROTATION_SCALE"


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@insertpiece(DefineGetTangentFrame)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get object space to world space data
	uint4  instanceIndices	  = InstanceIndicesArray[MAIN_INPUT_DRAW_ID];
	float3 position			  = TEXEL_FETCH(InstanceTextureBuffer, instanceIndices.x).xyz;
	float4 rotationQuaternion = TEXEL_FETCH(InstanceTextureBuffer, instanceIndices.x + 1u);
	float3 scale			  = TEXEL_FETCH(InstanceTextureBuffer, instanceIndices.x + 2u).xyz;

	// Get the object space position
	float3 objectSpacePosition = MAIN_INPUT(Position);

	// GPU skinning
	@property(UseGpuSkinning)
	{
		float4 objectSpaceToWorldSpaceMatrix[3];
		uint textureBufferIndex = instanceIndices.x + 3u;

		// First bone
		uint textureBufferBoneOffset = textureBufferIndex + MAIN_INPUT(blendIndices)[0] * 4;
		float boneWeight = MAIN_INPUT(blendWeights)[0];
		objectSpaceToWorldSpaceMatrix[0] = TEXEL_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u) * boneWeight;
		objectSpaceToWorldSpaceMatrix[1] = TEXEL_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u) * boneWeight;
		objectSpaceToWorldSpaceMatrix[2] = TEXEL_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 2u) * boneWeight;

		// The other bones
		for (int i = 1; i < 4; ++i)
		{
			textureBufferBoneOffset = textureBufferIndex + MAIN_INPUT(blendIndices)[i] * 4;
			boneWeight = MAIN_INPUT(blendWeights)[i];
			objectSpaceToWorldSpaceMatrix[0] += TEXEL_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u) * boneWeight;
			objectSpaceToWorldSpaceMatrix[1] += TEXEL_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u) * boneWeight;
			objectSpaceToWorldSpaceMatrix[2] += TEXEL_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 2u) * boneWeight;
		}

		// Transform
		float3 transformedPosition;
		transformedPosition.x = dot(objectSpaceToWorldSpaceMatrix[0], float4(objectSpacePosition, 1.0f));
		transformedPosition.y = dot(objectSpaceToWorldSpaceMatrix[1], float4(objectSpacePosition, 1.0f));
		transformedPosition.z = dot(objectSpaceToWorldSpaceMatrix[2], float4(objectSpacePosition, 1.0f));
		objectSpacePosition = transformedPosition;
	}
	@end

	// Calculate the world space vertex position
	float3 worldSpacePosition = MultiplyQuaternionVector(rotationQuaternion, objectSpacePosition * scale) + position;

	// Calculate the clip space vertex position, left/bottom is (-1,-1) and right/top is (1,1)
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.WorldSpaceToClipSpaceMatrix, float4(worldSpacePosition, 1.0f));

	// Pass through the assigned material slot inside the material uniform buffer
	MAIN_OUTPUT(AssignedMaterialSlotVS) = instanceIndices.y;

	// Pass through the 32 bit texture coordinate
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(TexCoord);
MAIN_END
