/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(15)	// "Core.shader_piece"
@includepiece(16)	// "TangentFrame.shader_piece"
@includepiece(164)	// "PhysicallyBasedShading.shader_piece"


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(float2, TexCoordVS, 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(float3, ViewRayVS,  1)	// View space ray used for view space position reconstruction
	INPUT_VERTEX_DRAW_ID							// Draw ID
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4   ViewSpaceFrustumCorners[4];
	float4x4 ClipSpaceToViewSpaceMatrix;
	float4x4 ViewSpaceToWorldSpaceMatrix;
	float4x4 ShadowMatrix;
	float3   ViewSpaceSunLightDirection;
	float    Wetness;
	float3   AmbientColor;
	uint	 NumberOfLights;
	float4	 ViewSpaceToWorldSpaceQuaternion;
	float3   SunLightColor;
	float3	 CameraWorldSpacePosition;
	float2   ViewportSize;
	float2 	 ProjectionParameters;
};
UNIFORM_BUFFER_BEGIN(PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(float4, LightTextureBuffer, 0)	// "LIGHT"

// Samplers
SAMPLER_STATE(SamplerPoint, 0)
SAMPLER_STATE(SamplerLinear, 1)

// Textures
@property(NumberOfMultisamples)
	TEXTURE_2D_MS(GBufferMap0, @value(NumberOfMultisamples), 1)	// GBuffer 0: rgb = diffuse color, a = alpha unused (required for blend operations)
	TEXTURE_2D_MS(GBufferMap1, @value(NumberOfMultisamples), 2)	// GBuffer 1: rgb = view space normal, a = roughness
	TEXTURE_2D_MS(GBufferMap2, @value(NumberOfMultisamples), 3)	// GBuffer 2: rgb = emissive color, a = metallic
	TEXTURE_2D_MS(DepthMap, @value(NumberOfMultisamples), 4)
@end
@property(!NumberOfMultisamples)
	TEXTURE_2D(GBufferMap0, 1)	// GBuffer 0: rgb = diffuse color, a = alpha unused (required for blend operations)
	TEXTURE_2D(GBufferMap1, 2)	// GBuffer 1: rgb = view space normal, a = roughness
	TEXTURE_2D(GBufferMap2, 3)	// GBuffer 2: rgb = emissive color, a = metallic
	TEXTURE_2D(DepthMap, 4)
@end
TEXTURE_2D(ShadowMap, 5)
TEXTURE_2D(ScreenSpaceAmbientOcclusionMap, 6)
TEXTURE_CUBE(ReflectionCubeMap, 7)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@insertpiece(DefineGetTangentFrame)
@insertpiece(DefinePhysicallyBasedShading)


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
// TODO(co) Make this to a shader piece
float GetLinearDepth(float depth)
{
	return PassData.ProjectionParameters.y / (depth - PassData.ProjectionParameters.x);
}

float3 CalculateColorByGBuffer(float3 viewRay, float2 screenSpacePosition, float4 gbuffer0Value, float4 gbuffer1Value, float4 gbuffer2Value, float depth, float screenSpaceAmbientOcclusion)
{
	// Gather GBuffer data
	float3 diffuse		   = gbuffer0Value.rgb;
	float3 viewSpaceNormal = gbuffer1Value.rgb;
	float  roughness	   = gbuffer1Value.a;
	float3 emissive		   = gbuffer2Value.rgb;
	float  metallic		   = SATURATE(PassData.Wetness + gbuffer2Value.a);

	// Scale the view ray by the ratio of the linear z value to the projected view ray
	// -> For details see "The Danger Zone" - "Position From Depth 3: Back In The Habit" - "Written by MJPSeptember 5, 2010" - https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
	float3 viewSpacePosition = viewRay * (GetLinearDepth(depth) / dot(float3(0.0f, 0.0f, 1.0f), viewRay));

	// Derive data
	float3 viewSpaceIncident = -normalize(viewSpacePosition);	// In view space, the camera is at the origin
	float3 worldSpacePosition = MATRIX_MUL(PassData.ViewSpaceToWorldSpaceMatrix, float4(viewSpacePosition.xyz, 1.0f)).xyz;
	float3 worldSpaceNormal = MultiplyQuaternionVector(PassData.ViewSpaceToWorldSpaceQuaternion, viewSpaceNormal);

	// TODO(co) Shadow: Totally primitive to have something to start with
	float shadowVisibility = 1.0f;
	{
		float4 shadowTextureCoordinate = MATRIX_MUL(PassData.ShadowMatrix, float4(worldSpacePosition, 1.0f));
		if (SAMPLE_2D_LOD(ShadowMap, SamplerPoint, float4(shadowTextureCoordinate.xy, 0.0f, 0.0f)).r < shadowTextureCoordinate.z - 0.001f)
		{
			shadowVisibility = 0.0f;
		}
	}

	// Ambient term
	float3 color = diffuse * (PassData.AmbientColor.rgb + CalculateHemisphereLighting(worldSpaceNormal.xyz, PassData.AmbientColor.rgb * 0.7f, PassData.AmbientColor.rgb * 0.2f));

	// Directional sun light, our primary light
	if (shadowVisibility > 0.0f)
	{
		color += CalculateLighting(diffuse, roughness, metallic, viewSpaceNormal, viewSpaceIncident, PassData.ViewSpaceSunLightDirection, PassData.SunLightColor);
	}

	// Point and spot lights
	// TODO(co) Just a quick'n'dirty test to have something to start with
	for (uint i = 0u; i < PassData.NumberOfLights; ++i)
	{
		// Fetch the light data
		float4 lightPositionRadius = TEXEL_FETCH(LightTextureBuffer, i * 2u);
		float4 lightColor = TEXEL_FETCH(LightTextureBuffer, i * 2u + 1u);

		// Check if the fragment is inside the bounding volume of the light
		float3 direction = lightPositionRadius.xyz - worldSpacePosition;
		float distance = sqrt(dot(direction, direction));
		if (distance < lightPositionRadius.w)
		{
			color += CalculateLighting(diffuse, roughness, metallic, viewSpaceNormal, viewSpaceIncident, normalize(direction), lightColor.rgb);
		}
	}

	// Apply screen space ambient occlusion
	// TODO(co) Currently doesn't look right with OpenGL and OpenGL ES 3 (coordinate system differences)
	@property(!GLSL && !GLSLES)
		color *= float3(screenSpaceAmbientOcclusion, screenSpaceAmbientOcclusion, screenSpaceAmbientOcclusion);
	@end

	// Emissive term
	color += emissive;

	// Done
	return color;
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get the normalized view ray
	float3 viewRay = normalize(MAIN_INPUT(ViewRayVS));

	// Gather screen space ambient occlusion value
	float screenSpaceAmbientOcclusion = SAMPLE_2D_LOD(ScreenSpaceAmbientOcclusionMap, SamplerPoint, float4(MAIN_INPUT(TexCoordVS), 0.0f, 0.0f)).r;

	// Calculate color by GBuffer
	@property(NumberOfMultisamples)
		// Custom MSAA resolve
		int2 textureCoordinate = int2(MAIN_INPUT(TexCoordVS) * PassData.ViewportSize);
		float3 color = float3(0.0f, 0.0f, 0.0f);
		int numberOfValues = 0;
		@foreach(NumberOfMultisamples, i, 0)
		{
			// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
			float depth = SAMPLE_2D_MS(DepthMap, textureCoordinate, @i).r;
			if (1.0f != depth)
			{
				// Read GBuffer data
				float4 gbuffer0Value = SAMPLE_2D_MS(GBufferMap0, textureCoordinate, @i);
				float4 gbuffer1Value = SAMPLE_2D_MS(GBufferMap1, textureCoordinate, @i);
				float4 gbuffer2Value = SAMPLE_2D_MS(GBufferMap2, textureCoordinate, @i);

				// Calculate color by GBuffer
				color += CalculateColorByGBuffer(viewRay, MAIN_INPUT(TexCoordVS), gbuffer0Value, gbuffer1Value, gbuffer2Value, depth, screenSpaceAmbientOcclusion);
				++numberOfValues;
			}
		}
		@end
		if (numberOfValues > 0)
		{
			color /= numberOfValues;
		}
		else
		{
			// Visible aliasing comes up. Since there's still also shader aliasing etc. one might want to use FXAA or so on top of everything.
			discard;
		}
	@end
	@property(!NumberOfMultisamples)
		float4 textureCoordinate = float4(MAIN_INPUT(TexCoordVS), 0.0f, 0.0f);

		// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
		float depth = SAMPLE_2D_LOD(DepthMap, SamplerPoint, textureCoordinate).r;
		if (1.0f == depth)
		{
			discard;
		}

		// Read GBuffer data
		float4 gbuffer0Value = SAMPLE_2D_LOD(GBufferMap0, SamplerPoint, textureCoordinate);
		float4 gbuffer1Value = SAMPLE_2D_LOD(GBufferMap1, SamplerPoint, textureCoordinate);
		float4 gbuffer2Value = SAMPLE_2D_LOD(GBufferMap2, SamplerPoint, textureCoordinate);

		// Calculate color by GBuffer
		float3 color = CalculateColorByGBuffer(viewRay, MAIN_INPUT(TexCoordVS), gbuffer0Value, gbuffer1Value, gbuffer2Value, depth, screenSpaceAmbientOcclusion);
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(color, 1.0f);
MAIN_END
