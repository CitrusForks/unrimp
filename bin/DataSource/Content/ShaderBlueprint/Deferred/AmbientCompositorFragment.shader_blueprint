/*********************************************************\
 * Copyright (c) 2012-2017 Christian Ofenberg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(15)	// "Core.shader_piece"
@includepiece(16)	// "TangentFrame.shader_piece"


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@insertpiece(DefineGetTangentFrame)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(float2, TexCoordVS, 0)	// Texture coordinate
	INPUT_VERTEX_DRAW_ID							// Draw ID
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 ClipSpaceToWorldSpaceMatrix;
	float4x4 ShadowMatrix;
	float3   ViewSpaceSunLightDirection;
	float    Wetness;
	float3   SunLightColor;
	int		 NumberOfLights;
	float2   ViewportSize;
};
UNIFORM_BUFFER_BEGIN(PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Texture buffers
TEXTURE_BUFFER(float4, LightTextureBuffer, 0)	// "LIGHT"

// Samplers
SAMPLER_STATE(SamplerPoint, 0)

// Textures
@property(NumberOfMultisamples)
	TEXTURE_2D_MS(GBufferMap0, @value(NumberOfMultisamples), 1)	// GBuffer 0: rgb = diffuse color, a = alpha unused (required for blend operations)
	TEXTURE_2D_MS(GBufferMap1, @value(NumberOfMultisamples), 2)	// GBuffer 1: rgb = view space normal, a = specular luminance or used as metallic
	TEXTURE_2D_MS(GBufferMap2, @value(NumberOfMultisamples), 3)	// GBuffer 2: rgb = emissive color, a = glossiness
	TEXTURE_2D_MS(DepthMap, @value(NumberOfMultisamples), 4)
@end
@property(!NumberOfMultisamples)
	TEXTURE_2D(GBufferMap0, 1)	// GBuffer 0: rgb = diffuse color, a = alpha unused (required for blend operations)
	TEXTURE_2D(GBufferMap1, 2)	// GBuffer 1: rgb = view space normal, a = specular luminance or used as metallic
	TEXTURE_2D(GBufferMap2, 3)	// GBuffer 2: rgb = emissive color, a = glossiness
	TEXTURE_2D(DepthMap, 4)
@end
TEXTURE_2D(ShadowMap, 5)


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
// TODO(co) Put into shader piece
float3 getWorldSpacePositionByScreenSpacePosition(float2 screenSpacePosition, float depth)
{
	// API coordinate system related differences
	@property(HLSL)
		screenSpacePosition.y = 1.0f - screenSpacePosition.y;
	@end
	@property(GLSL || GLSLES)
		// 0..1 -> -1..1
		depth = depth * 2.0f - 1.0f;
	@end

	// Get x/w and y/w from the screen space position
	float x = screenSpacePosition.x * 2.0f - 1.0f;
	float y = screenSpacePosition.y * 2.0f - 1.0f;
	float4 projectedPosition = float4(x, y, depth, 1.0f);

	// Get world-space position
	float4 inversePosition = MATRIX_MUL(PassData.ClipSpaceToWorldSpaceMatrix, projectedPosition);
	return inversePosition.xyz / inversePosition.w;
}

// TODO(co) Just a first test, need reusable shader piece for this
float3 calculateLighting(float3 lightDirection, float3 lightColor, float3 normal, float3 diffuseValue, float specularValue)
{
	// Perform standard Blinn-Phong diffuse and specular lighting

	// Calculate the diffuse lighting
	float diffuseLightFactor = max(dot(normal, lightDirection), 0.0f);
	float3 diffuseLightColor = lightColor * diffuseLightFactor;

	// Build in variables
	float3 ViewSpaceCameraDirection = float3(0.0f, 0.0f, 1.0f);	// In view space, we always look along the positive z-axis

	// Calculate the specular lighting
	float3 viewSpaceHalfVector = normalize(lightDirection + ViewSpaceCameraDirection);
	float specularLightFactor = (diffuseLightFactor > 0.0f) ? pow(max(dot(normal, viewSpaceHalfVector), 0.0f), 128.0f) : 0.0f;
	float3 specularLightColor = PassData.Wetness * lightColor * specularLightFactor;

	// Diffuse term
	float3 color = diffuseLightColor * diffuseValue;

	// Specular term
	color += specularLightColor * specularValue;

	// Done
	return color;
}

float3 calculateColorByGBuffer(float2 screenSpacePosition, float4 gbuffer0Value, float4 gbuffer1Value, float4 gbuffer2Value, float depthValue)
{
	// Gather GBuffer data
	float3 diffuseValue = gbuffer0Value.rgb;
	float3 normal = gbuffer1Value.rgb;
	float specularValue = gbuffer1Value.a;
	float3 emissiveValue = gbuffer2Value.rgb;

	// Derive data
	float3 worldSpacePosition = getWorldSpacePositionByScreenSpacePosition(screenSpacePosition, depthValue);

	// TODO(co) Shadow: Totally primitive to have something to start with
	float shadowVisibility = 1.0f;
	{
		float4 shadowTextureCoordinate = MATRIX_MUL(PassData.ShadowMatrix, float4(worldSpacePosition, 1.0f));
		if (SAMPLE_2D_LOD(ShadowMap, SamplerPoint, float4(shadowTextureCoordinate.xy, 0.0f, 0.0f)).r < shadowTextureCoordinate.z - 0.001f)
		{
			shadowVisibility = 0.0f;
		}	
	}

	// Ambient term
	float3 color = float3(0.2f, 0.2f, 0.2f) * diffuseValue;

	// Primary directional light
	if (shadowVisibility > 0.0f)
	{
		color += calculateLighting(PassData.ViewSpaceSunLightDirection, PassData.SunLightColor, normal, diffuseValue, specularValue);
	}

	// Point and spot lights
	for (int i = 0; i < PassData.NumberOfLights; ++i)
	{
		// Fetch the light data
		float4 lightPositionRadius = TEXEL_FETCH(LightTextureBuffer, i * 2);
		float4 lightColor = TEXEL_FETCH(LightTextureBuffer, i * 2 + 1);

		// Check if the fragment is inside the bounding volume of the light
		float3 direction = lightPositionRadius.xyz - worldSpacePosition;
		float distance = sqrt(dot(direction, direction));
		if (distance < lightPositionRadius.w)
		{
			color += calculateLighting(normalize(direction), lightColor.rgb, normal, diffuseValue, specularValue);
		}
	}

	// Emissive term
	color += emissiveValue;

	// Done
	return color;	
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	@property(NumberOfMultisamples)
		// Custom MSAA resolve
		int2 textureCoordinate = int2(MAIN_INPUT(TexCoordVS) * PassData.ViewportSize);
		float3 color = float3(0.0f, 0.0f, 0.0f);
		int numberOfValues = 0;
		@foreach(NumberOfMultisamples, i, 0)
		{
			// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
			float depthValue = SAMPLE_2D_MS(DepthMap, textureCoordinate, @i).r;
			if (1.0f != depthValue)
			{
				// Read GBuffer data
				float4 gbuffer0Value = SAMPLE_2D_MS(GBufferMap0, textureCoordinate, @i);
				float4 gbuffer1Value = SAMPLE_2D_MS(GBufferMap1, textureCoordinate, @i);
				float4 gbuffer2Value = SAMPLE_2D_MS(GBufferMap2, textureCoordinate, @i);

				// Calculate color by GBuffer
				color += calculateColorByGBuffer(MAIN_INPUT(TexCoordVS), gbuffer0Value, gbuffer1Value, gbuffer2Value, depthValue);
				++numberOfValues;
			}
		}
		@end
		if (numberOfValues > 0)
		{
			color /= numberOfValues;
		}
		else
		{
			// Visible aliasing comes up. Since there's still also shader aliasing etc. one might want to use FXAA or so on top of everything.
			discard;
		}
	@end
	@property(!NumberOfMultisamples)
		float4 textureCoordinate = float4(MAIN_INPUT(TexCoordVS), 0.0f, 0.0f);

		// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
		float depthValue = SAMPLE_2D_LOD(DepthMap, SamplerPoint, textureCoordinate).r;
		if (1.0f == depthValue)
		{
			discard;
		}

		// Read GBuffer data
		float4 gbuffer0Value = SAMPLE_2D_LOD(GBufferMap0, SamplerPoint, textureCoordinate);
		float4 gbuffer1Value = SAMPLE_2D_LOD(GBufferMap1, SamplerPoint, textureCoordinate);
		float4 gbuffer2Value = SAMPLE_2D_LOD(GBufferMap2, SamplerPoint, textureCoordinate);

		// Calculate color by GBuffer
		float3 color = calculateColorByGBuffer(MAIN_INPUT(TexCoordVS), gbuffer0Value, gbuffer1Value, gbuffer2Value, depthValue);
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(color, 1.0f);
MAIN_END
