/*********************************************************\
 * Copyright (c) 2012-2016 Christian Ofenberg
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Includes                                              ]
//[-------------------------------------------------------]
@includepiece(15)	// "Core.shader_piece"
@includepiece(16)	// "TangentFrame.shader_piece"


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_VERTEX_POSITION(float3, Position)				// Object space vertex position
	@property(HLSL)
		INPUT_TEXTURE_COORDINATE(int2, TexCoord, 0)		// 16 bit texture coordinate
		INPUT_TEXTURE_COORDINATE(int4, QTangent, 1)		// 16 bit QTangent
	@end
	@property(GLSL)
		INPUT_TEXTURE_COORDINATE(float2, TexCoord, 0)	// 16 bit texture coordinate
		INPUT_TEXTURE_COORDINATE(float4, QTangent, 1)	// 16 bit QTangent
	@end
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE(float2, TexCoordVS, 0)		// Texture coordinate
	OUTPUT_TEXTURE_COORDINATE(float3, TangentFrame0VS, 1)	// Tangent frame
	OUTPUT_TEXTURE_COORDINATE(float3, TangentFrame1VS, 2)	// Tangent frame
	OUTPUT_TEXTURE_COORDINATE(float3, TangentFrame2VS, 3)	// Tangent frame
	OUTPUT_POSITION											// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END

// Uniform buffers
UNIFORM_BUFFER_BEGIN(PassUniformBuffer, 0)
	float4x4 WorldSpaceToViewSpaceMatrix;
	float4x4 WorldSpaceToClipSpaceMatrix;
	float3	 ViewSpaceSunLightDirection;
	float	 Wetness;
	float3	 SunLightColor;
	float	 StaticPropertyTest;
UNIFORM_BUFFER_END
UNIFORM_BUFFER_BEGIN(InstanceUniformBuffer, 2)
	float4x4 ObjectSpaceToWorldSpaceMatrix;
	int		 MaterialIndex;
UNIFORM_BUFFER_END


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@insertpiece(DefineGetTangentFrame)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Calculate the world space vertex position
	float4 worldSpacePosition = MATRIX_MUL(ObjectSpaceToWorldSpaceMatrix, float4(MAIN_INPUT(Position) * StaticPropertyTest, 1.0f));

	// Calculate the clip space vertex position, left/bottom is (-1,-1) and right/top is (1,1)
	MAIN_OUTPUT_POSITION = MATRIX_MUL(WorldSpaceToClipSpaceMatrix, worldSpacePosition);

	// Pass through the decoded 16 bit texture coordinate
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(TexCoord) / 32767.0f;

	// Calculate the tangent space to view space tangent, binormal and normal
	// - 16 bit QTangent basing on http://dev.theomader.com/qtangents/ "QTangents" which is basing on
	//   http://www.crytek.com/cryengine/presentations/spherical-skinning-with-dual-quaternions-and-qtangents "Spherical Skinning with Dual-Quaternions and QTangents"
	// TODO(co) float3x3
	float4x4 objectSpaceToViewSpaceMatrix = MATRIX_MUL(WorldSpaceToViewSpaceMatrix, ObjectSpaceToWorldSpaceMatrix);
	float3x3 tangentFrame = GetTangentFrame(CAST_TO(objectSpaceToViewSpaceMatrix, float3x3), MAIN_INPUT(QTangent) / 32767.0f);
	MAIN_OUTPUT(TangentFrame0VS) = tangentFrame[0];
	MAIN_OUTPUT(TangentFrame1VS) = tangentFrame[1];
	MAIN_OUTPUT(TangentFrame2VS) = tangentFrame[2];
MAIN_END
